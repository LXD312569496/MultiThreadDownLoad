package com.example.asus.downloaddemo.common.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_INFO".
*/
public class AppInfoDao extends AbstractDao<AppInfo, String> {

    public static final String TABLENAME = "APP_INFO";

    /**
     * Properties of entity AppInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FileName = new Property(0, String.class, "fileName", true, "FILE_NAME");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Length = new Property(2, long.class, "length", false, "LENGTH");
        public final static Property Finished = new Property(3, long.class, "finished", false, "FINISHED");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
    }


    public AppInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_INFO\" (" + //
                "\"FILE_NAME\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: fileName
                "\"URL\" TEXT," + // 1: url
                "\"LENGTH\" INTEGER NOT NULL ," + // 2: length
                "\"FINISHED\" INTEGER NOT NULL ," + // 3: finished
                "\"STATUS\" INTEGER NOT NULL );"); // 4: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppInfo entity) {
        stmt.clearBindings();
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(1, fileName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getLength());
        stmt.bindLong(4, entity.getFinished());
        stmt.bindLong(5, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppInfo entity) {
        stmt.clearBindings();
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(1, fileName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getLength());
        stmt.bindLong(4, entity.getFinished());
        stmt.bindLong(5, entity.getStatus());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public AppInfo readEntity(Cursor cursor, int offset) {
        AppInfo entity = new AppInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fileName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.getLong(offset + 2), // length
            cursor.getLong(offset + 3), // finished
            cursor.getInt(offset + 4) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppInfo entity, int offset) {
        entity.setFileName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLength(cursor.getLong(offset + 2));
        entity.setFinished(cursor.getLong(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(AppInfo entity, long rowId) {
        return entity.getFileName();
    }
    
    @Override
    public String getKey(AppInfo entity) {
        if(entity != null) {
            return entity.getFileName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppInfo entity) {
        return entity.getFileName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
